{"/home/travis/build/npmtest/node-npmtest-youtube-dl/test.js":"/* istanbul instrument in package npmtest_youtube_dl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-youtube-dl/lib.npmtest_youtube_dl.js":"/* istanbul instrument in package npmtest_youtube_dl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_youtube_dl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_youtube_dl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-youtube-dl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-youtube-dl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_youtube_dl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_youtube_dl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_youtube_dl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_youtube_dl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_youtube_dl.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_youtube_dl.__dirname + '/lib.npmtest_youtube_dl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-youtube-dl/node_modules/youtube-dl/lib/youtube-dl.js":"var execFile  = require('child_process').execFile;\nvar fs        = require('fs');\nvar path      = require('path');\nvar url       = require('url');\nvar http      = require('http');\nvar streamify = require('streamify');\nvar request   = require('request');\nvar util      = require('./util');\n\nvar detailsPath = path.join(__dirname, '..', 'bin/details'), ytdlBinary;\n\nif (fs.existsSync(detailsPath)) {\n  var details = JSON.parse(fs.readFileSync(detailsPath));\n  ytdlBinary = (details.path) ? details.path : path.resolve(__dirname, '..', 'bin', details.exec);\n}\n\n// Check that youtube-dl file exists.\nif (!fs.existsSync(ytdlBinary)) {\n  console.log('ERROR: unable to locate youtube-dl details in ' + path.dirname(ytdlBinary));\n  process.exit(1);\n}\n\nvar isDebug = /^\\[debug\\] /;\nvar isWarning = /^WARNING: /;\nvar isYouTubeRegex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\//;\nvar isNoSubsRegex = /WARNING: video doesn't have subtitles|no closed captions found/;\nvar videoNotAvailable = /This video is not available/;\nvar subsRegex = /--write-sub|--write-srt|--srt-lang|--all-subs/;\n\n/**\n * Processes data\n *\n * @param {Object} data\n * @param {Object} options\n * @param {Object} stream\n */\n\nfunction processData(data, options, stream) {\n\n  'use strict';\n  var item = (!data.length) ? data : data.shift();\n\n  // fix for pause/resume downloads\n  var headers = {\n    'Host': url.parse(item.url).hostname\n  };\n\n  if (options && options.start > 0) {\n    headers.Range = 'bytes=' + options.start + '-';\n  }\n\n  var req = request({\n    url: item.url,\n    headers: headers\n  });\n\n  req.on('response', function response(res) {\n\n    var size = parseInt(res.headers['content-length'], 10);\n    if (size) {\n      item.size = size;\n    }\n\n    if (options && options.start > 0 && res.statusCode === 416) {\n      // the file that is being resumed is complete.\n      return stream.emit('complete', item);\n    }\n\n    if (res.statusCode !== 200 && res.statusCode !== 206) {\n      return stream.emit('error', new Error('status code ' + res.statusCode));\n    }\n\n    stream.emit('info', item);\n\n    stream.on('end', function end() {\n      if (data.length) { stream.emit('next', data); }\n    });\n\n  });\n\n  stream.resolve(req);\n}\n\n/**\n * Downloads a video.\n *\n * @param {String} videoUrl\n * @param {!Array.<String>} args\n * @param {!Object} options\n */\nvar ytdl = module.exports = function(videoUrl, args, options) {\n\n  'use strict';\n  var stream = streamify({\n    superCtor: http.ClientResponse,\n    readable: true,\n    writable: false\n  });\n\n  if (typeof videoUrl !== 'string') {\n    processData(videoUrl, options, stream);\n    return stream;\n  }\n\n  ytdl.getInfo(videoUrl, args, options, function getInfo(err, data) {\n    if (err) { return stream.emit('error', err); }\n    processData(data, options, stream);\n  });\n\n  return stream;\n};\n\n/**\n * Calls youtube-dl with some arguments and the `callback`\n * gets called with the output.\n *\n * @param {String|Array.<String>}\n * @param {Array.<String>} args\n * @param {Array.<String>} args2\n * @param {Object} options\n * @param {Function(!Error, String)} callback\n */\nfunction call(urls, args1, args2, options, callback) {\n  'use strict';\n  var args = args1;\n  var passOver = false;\n  if (args2) {\n    args = args.concat(util.parseOpts(args2));\n  }\n  options = options || {};\n\n  if (urls !== null) {\n    if (typeof urls === 'string') {\n      urls = [urls];\n    }\n\n    for (var i = 0; i < urls.length; i++) {\n      var video = urls[i];\n      if (isYouTubeRegex.test(video)) {\n        // Get possible IDs.\n        var details = url.parse(video, true);\n        var id = details.query.v || '';\n        if (id) {\n          args.push('http://www.youtube.com/watch?v=' + id);\n        } else {\n          // Get possible IDs for youtu.be from urladdr.\n          id = details.pathname.slice(1).replace(/^v\\//, '');\n          if (id) {\n            if ((id === 'playlist') && !options.maxBuffer) { options.maxBuffer = 7000 * 1024; }\n            args.push(video);\n            args.unshift('-i');\n          }\n        }\n      } else {\n        args.push(video);\n      }\n    }\n  }\n\n  // Call youtube-dl.\n  execFile(ytdlBinary, args, options, function done(err, stdout, stderr) {\n    if (err) {\n      if (videoNotAvailable.test(err.message)) { passOver = true; }\n      if (!passOver) { return callback(err); }\n    }\n\n    if (stderr && !passOver) {\n      // Try once to download video if no subtitles available\n      if (!options.nosubs && isNoSubsRegex.test(stderr)) {\n        var i;\n        var cleanupOpt = args2;\n\n        for (i = cleanupOpt.length - 1; i >= 0; i--) {\n          if (subsRegex.test(cleanupOpt[i])) { cleanupOpt.splice(i, 1); }\n        }\n\n        options.nosubs = true;\n\n        return call(video, args1, cleanupOpt, options, callback);\n\n      }\n\n      if (isDebug.test(stderr) && args.indexOf('--verbose') > -1) {\n        console.log('\\n' + stderr);\n      } else if (isWarning.test(stderr)) {\n        console.warn(stderr);\n      } else {\n        return callback(new Error(stderr.slice(7)));\n      }\n\n    }\n\n    var data = stdout.trim().split(/\\r?\\n/);\n\n    callback(null, data);\n  });\n\n}\n\n/**\n * Calls youtube-dl with some arguments and the `callback`\n * gets called with the output.\n *\n * @param {String} url\n * @param {Array.<String>} args\n * @param {Object} options\n * @param {Function(!Error, String)} callback\n */\nytdl.exec = function exec(url, args, options, callback) {\n  'use strict';\n  return call(url, [], args, options, callback);\n};\n\n\n/**\n * @param {Object} data\n * @returns {Object}\n */\nfunction parseInfo(data) {\n  'use strict';\n  var info = JSON.parse(data);\n\n  // Add and process some entries to keep backwards compatibility\n  Object.defineProperty(info, 'filename', {\n    get: function get() {\n      console.warn('`info.filename` is deprecated, use `info._filename`');\n      return info._filename;\n    }\n  });\n  Object.defineProperty(info, 'itag', {\n    get: function get() {\n      console.warn('`info.itag` is deprecated, use `info.format_id`');\n      return info.format_id;\n    }\n  });\n  Object.defineProperty(info, 'resolution', {\n    get: function get() {\n      console.warn('`info.resolution` is deprecated, use `info.format`');\n      return info.format.split(' - ')[1];\n    }\n  });\n  info.duration = util.formatDuration(info.duration);\n  return info;\n}\n\n\n/**\n * Gets info from a video.\n *\n * @param {String} url\n * @param {Array.<String>} args\n * @param {Object} options\n * @param {Function(!Error, Object)} callback\n */\nytdl.getInfo = function getInfo(url, args, options, callback) {\n  'use strict';\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (typeof args === 'function') {\n    callback = args;\n    options = {};\n    args = [];\n  }\n  var defaultArgs = ['--dump-json'];\n  if (!args || args.indexOf('-f') < 0 && args.indexOf('--format') < 0 &&\n      args.every(function(a) {\n        return a.indexOf('--format=') !== 0;\n      })) {\n    defaultArgs.push('-f');\n    defaultArgs.push('best');\n  }\n\n  call(url, defaultArgs, args, options, function done(err, data) {\n    if (err) { return callback(err); }\n    var info;\n    try {\n      info = data.map(parseInfo);\n    } catch (err) {\n      return callback(err);\n    }\n\n    callback(null, info.length === 1 ? info[0] : info);\n  });\n};\n\n\n/**\n * @param {String} url\n * @param {!Array.<String>} args\n * @param {Function(!Error, Object)} callback\n */\nytdl.getFormats = function getFormats(url, args, callback) {\n  'use strict';\n  console.warn('`getFormats()` is deprecated. Please use `getInfo()`');\n\n  if (typeof args === 'function') {\n    callback = args;\n    args = [];\n  }\n\n  ytdl.getInfo(url, args, {}, function done(err, video_info) {\n    if (err) { return callback(err); }\n\n    var formats_info = video_info.formats || [video_info];\n    var formats = formats_info.map(function mapIt(format) {\n        return {\n          id: video_info.id,\n          itag: format.format_id,\n          filetype: format.ext,\n          resolution: format.format.split(' - ')[1].split(' (')[0],\n        };\n    });\n\n    callback(null, formats);\n  });\n};\n\n/**\n * @param {String} url\n * @param {Object} options\n *   {Boolean} auto\n *   {Boolean} all\n *   {String} lang\n *   {String} cwd\n * @param {Function(!Error, Object)} callback\n */\nytdl.getSubs = function getSubs(url, options, callback) {\n  'use strict';\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var args = ['--skip-download'];\n  args.push('--write' + (options.auto ? '-auto' : '') + '-sub');\n  if (options.all) {\n    args.push('--all-subs');\n  }\n  if (options.lang) {\n    args.push('--sub-lang=' + options.lang);\n  }\n  if (!options.warrning) {\n    args.push('--no-warnings');\n  }\n\n  call(url, args, [], { cwd: options.cwd }, function(err, data) {\n    if (err) { return callback(err); }\n\n    var files = [];\n    for (var i = 0, len = data.length; i < len; i++) {\n      var line = data[i];\n      if (line.indexOf('[info] Writing video subtitles to: ') === 0) {\n        files.push(line.slice(35));\n      }\n    }\n    callback(null, files);\n  });\n};\n\n/**\n * @param {!Boolean} descriptions\n * @param {!Object} options\n * @param {Function(!Error, Object)} callback\n */\nytdl.getExtractors = function getExtractors(descriptions, options, callback) {\n  'use strict';\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } else if (typeof descriptions === 'function') {\n    callback = descriptions;\n    options = {};\n    descriptions = false;\n  }\n\n  var args = descriptions ?\n    ['--extractor-descriptions'] : ['--list-extractors'];\n  call(null, args, null, options, callback);\n};\n","/home/travis/build/npmtest/node-npmtest-youtube-dl/node_modules/youtube-dl/lib/util.js":"// Arguments we dont want users to use with youtube-dl\n// because they will break the module.\nvar badArgs = [\n  '-h', '--help',\n  '-v', '--version',\n  '-U', '--update',\n  '-q', '--quiet',\n  '-s', '--simulate',\n  '-g', '--get-url',\n  '-e', '--get-title',\n  '--get-id',\n  '--get-thumbnail',\n  '--get-description',\n  '--get-duration',\n  '--get-filename',\n  '--get-format',\n  '-j', '--dump-json',\n  '--newline',\n  '--no-progress',\n  '--console-title',\n  '-v', '--verbose',\n  '--dump-intermediate-pages',\n  '--write-pages',\n  '--print-traffic',\n];\n\n/**\n * Helps parse options used in youtube-dl command.\n *\n * @param {Array.<String>}\n * @return {Array.<String>}\n */\nexports.parseOpts = function(args) {\n  var pos;\n  for (var i = 0, len = badArgs.length; i < len; i++) {\n    if ((pos = args.indexOf(badArgs[i])) !== -1) {\n      args.splice(pos, 1);\n    }\n  }\n  return args;\n};\n\n\n/**\n * Converts seconds to format hh:mm:ss\n *\n * @param {Number} seconds\n * @return {String}\n */\nexports.formatDuration = function(seconds) {\n  var parts = [];\n  parts.push(seconds % 60);\n  var minutes = Math.floor(seconds / 60);\n  if (minutes > 0) {\n    parts.push(minutes % 60);\n    var hours = Math.floor(minutes / 60);\n    if (hours > 0) {\n        parts.push(hours);\n    }\n  }\n  return parts.reverse().join(':');\n};\n","/home/travis/build/npmtest/node-npmtest-youtube-dl/node_modules/youtube-dl/lib/downloader.js":"var fs    = require('fs');\nvar path  = require('path');\nvar mkdirp = require('mkdirp');\nvar request = require('request');\n\n// First, look for the download link.\n/*jshint maxlen:false */\nvar dir, filePath;\nvar isWin = (process.platform === 'win32' || process.env.NODE_PLATFORM === 'windows') ? true : false;\nvar defaultBin = path.join(__dirname, '..', 'bin');\nvar defaultPath = path.join(defaultBin, 'details');\nvar regexp = /https:\\/\\/yt-dl\\.org\\/downloads\\/(\\d{4}\\.\\d\\d\\.\\d\\d(\\.\\d)?)\\/youtube-dl/;\nvar url = 'https://rg3.github.io/youtube-dl/download.html';\n\nfunction download(link, callback) {\n\n  'use strict';\n  var downloadFile = request.get(link);\n  var status = null;\n\n  downloadFile.on('response', function response(res) {\n    if (res.statusCode !== 200) {\n      status = new Error('Response Error: ' + res.statusCode);\n      return;\n    }\n    downloadFile.pipe(fs.createWriteStream(filePath, {mode: 457}));\n  });\n\n  downloadFile.on('error', function error(err) { callback(err); });\n\n  downloadFile.on('end', function end() { callback(status); });\n\n}\n\nfunction exec(path) {\n  'use strict';\n  return (isWin) ? path + '.exe' : path;\n}\n\nfunction createBase(binDir) {\n  'use strict';\n  dir = (binDir) ? binDir : defaultBin;\n  mkdirp.sync(dir);\n  if (binDir) { mkdirp.sync(defaultBin); }\n  filePath = path.join(dir, exec('youtube-dl'));\n}\n\nfunction downloader(binDir, callback) {\n\n  'use strict';\n  if (typeof binDir === 'function') {\n    callback = binDir;\n    binDir = null;\n  }\n\n  createBase(binDir);\n\n  request.get(url, function get(err, res, body) {\n\n    if (err || res.statusCode !== 200) { return callback(err || new Error('Response Error: ' + res.statusCode)); }\n\n    var m = regexp.exec(body);\n\n    if (!m) { return callback(new Error('Could not find download link in ' + url)); }\n\n    // Check if there is a new version available.\n    var newVersion = m[1];\n\n    var details = fs.existsSync(defaultPath) && fs.readFileSync(defaultPath, 'utf8');\n\n    if (details) { details = JSON.parse(details); }\n\n    if (newVersion === details.version && fs.existsSync(details.path)) { return callback(null, 'Already up to date ' + newVersion); }\n\n    var link = exec(m[0]);\n\n    download(link, function error(err) {\n      if (err) { return callback(err); }\n      fs.writeFileSync(defaultPath, JSON.stringify({version: newVersion, path: ((binDir) ? filePath : binDir), exec: exec('youtube-dl')}), 'utf8');\n      callback(null, 'Downloaded youtube-dl ' + newVersion);\n    });\n\n  });\n\n}\n\nmodule.exports = downloader;\n","/home/travis/build/npmtest/node-npmtest-youtube-dl/node_modules/youtube-dl/scripts/download.js":"var downloader = require('../lib/downloader');\n\ndownloader(function error(err, done) {\n  'use strict';\n  if (err) { return console.log(err.stack); }\n  console.log(done);\n});\n"}